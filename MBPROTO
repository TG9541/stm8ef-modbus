\ STM8 eForth MODBUS protocol handler - intended to run as an IDLE task

#require UARTISR
#require CRC16
#require ]B!
#require WIPE

NVM
  VARIABLE mbnode  \ MODBUS node id
  VARIABLE crcerr  \ CRC error counter
  VARIABLE mbpre   \ xt for FC preparation (e.g. reading inputs)
  VARIABLE mbact   \ xt for output action (e.g. output, debugging)
  VARIABLE mbdef   \ xt for default handler
  VARIABLE mbp 2 ALLOT  \ MODBUS parameter 1 and 2

  \ calc CRC16 from buffer a0 to a1
  : MBCRC ( a1 a0 -- crc-le )
    -1 ROT ROT ( -1 a1 a0 ) DO
      I C@ CRC16
    LOOP
    ( CRC16 ) EXG ( CRC-LE )
  ;

  \ flag MODBUS Exception and set code
  : MBEC ( ec -- )
    [ 1 rtbuf 1+ 7 ]B!  \ flag error in FC field
    ( ec ) txc+         \ and put EC
  ;

  \ default FC handler - raise EC 1 "ILLEGAL FUNCTION"
  : FCDEF ( -- )
    mbdef @ ?DUP IF
      \ maybe there is something else you want to try
      ( xt ) EXECUTE
    ELSE
      1 MBEC
    THEN
  ;

  \ make FC-XT Table for FC>XT, initialize with "default FC handler"
  HERE ( [ tab ] ) ' FCDEF ( [ a1 a2 ] )
    DUP , DUP , DUP , DUP , DUP , DUP , DUP , DUP ,
    DUP , DUP , DUP , DUP , DUP , DUP , DUP ,     ,

  \ turn FC into XT table address
  : FC>XT ( fc -- a )
    \ map FC17 to FC24 to FC-XT table index 6..13 (see issue #47)
    DUP 17 < IF 1- ELSE 11 - THEN
    2* ( [ tab ] ) LITERAL +
  ;

  \ execute xt if not 0
  : @?EXEC ( xt -- ) @ ?DUP IF
    ( xt ) EXECUTE
    THEN
  ;

  \ get MODBUS FC
  : mbfc ( -- c )
    rtbuf 1+ C@
  ;

  \ 1st MODBUS FC parameter
  : mbp1 ( -- n )
    mbp @
  ;

  \ 2nd MODBUS FC parameter
  : mbp2 ( -- n )
    mbp 2+ @
  ;

  \ MODBUS write response (e.g FC05, FC06, FC15, FC16)
  : MBWR  ( -- )
    mbp1 tx+ mbp2 tx+  \ copy 1st and 2nd parameter
  ;

  \ true if n in range mbp1,mbp2, else false and MODBUS EC=2
  : mbrange? ( n -- b )
    -1 ( b ) SWAP mbp1 mbp2 + - 0< IF
      2 MBEC ( b ) NOT
    THEN
  ;

  \ MB loop (xt) from mbp1 to mbp1+mbp2
  : mbloop ( xt -- )
    mbp1 mbp2 OVER + SWAP  DO
      ( xt ) I OVER EXECUTE
    LOOP
    ( xt ) DROP
  ;

  \ MB looped bit read with action xt, build response (FC01, FC02, FC03, FC04)
  : mbread ( xt bpu -- )
    ( xt bpu ) DUP mbp2 * ( bpu bits )
    \ N* as quantity of bits / 8, if the remainder is different of 0 => N=N+1
    ( bits ) 1- 8 / 1+ ( N* ) DUP txc+
    ( bpu N* ) SWAP ( bpu ) 1 = IF
       ( N* ) 1- FOR 0 txc+ NEXT  \ init bytes in response with 0
    ELSE
       ( N* ) DROP  \ not a bitfield, no memory init
    THEN
    ( xt ) mbloop
  ;

  \ MODBUS protocol handler
  : MBPROTO ( -- )
    rtbuf rxp @ - ( rx )
    1 TIM tstamp @ - < AND ( message trigger )
    IF
      rxp @ 2- ( a1 ) DUP rtbuf ( a1 a1 a0 )
      MBCRC ( a1 crc-le ) SWAP @ = ( crc OK )
      ( crc-ok ) IF
        mbnode @ rtbuf C@ = IF  \ node address match
          rtbuf 2+ 2@ ( mbp2 mbp1 ) mbp 2!    \ keep MODBUS parameter
          mbpre @?EXEC    \ preparation handler, e.g. read inputs
          mbfc ( fc ) DUP 1 25 WITHIN IF
             FC>XT @?EXEC \ get and execute FC handler
          ELSE
            FCDEF         \ default handler
          THEN
          tbp @ rtbuf ( a1 a0 ) MBCRC ( CRC-LE ) tx+
          mbact @?EXEC    \ action handler, e.g. write outputs
          send
        THEN
      ELSE
        1 crcerr +!
      THEN
      rxres
    THEN
  ;

RAM

\ To speed up MODBUS server development:
\ * load MBPROTO manually
\ * #require and run PERSIST
\ RESET will then go back to this point :-)

\\ Example

\ Minimal MODBUS server with a FC06 "Write Single Register" handler

#require MBPROTO

RAM
#require WIPE
#require MBRESET
MBRESET   \ Reset the MODBUS Function Code table

#require :NVM
#require 'IDLE

NVM
#require MBDUMP

  \ --- FC06 handler "Write Single Register"
  :NVM  ( -- )
    \ write register address and value to the console
    ." Write register:" mbp1 . ." =" mbp2 . CR
    MBWR  \ acknowledge FC06
  ;NVM ( xt ) 6 FC>XT !   \ register the FC handler

  : showfc ( -- )
    rtbuf 1+ C@ ." FC:" . CR
    1 MBEC  \ set error code
  ;

  : init ( -- )
    0 UARTISR                     \ init UART handler w/ default baud rate
    1 mbnode !                    \ set node address
    [ ' showfc ] LITERAL mbdef !  \ FC default action (optional feature)
    [ ' MBDUMP ] LITERAL mbact !  \ show buffers (debug demo)
    [ ' MBPROTO ] LITERAL 'IDLE ! \ run MB protocol handler as idle task
  ;

  ' init 'BOOT !
WIPE RAM
